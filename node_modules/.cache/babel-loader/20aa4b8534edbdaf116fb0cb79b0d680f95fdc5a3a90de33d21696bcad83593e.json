{"ast":null,"code":"const {\n  Configuration,\n  OpenAIApi\n} = require('openai');\n\n// Check if the API key is set\nconst apiKey = process.env.OPEN_API_KEY;\nif (!apiKey) {\n  console.error('Error: OpenAI API key is not set.');\n  process.exit(1); // Exit the process with an error code\n}\n\n// Create a configuration instance\nconst configuration = new Configuration({\n  apiKey\n});\n\n// Create an OpenAIApi instance\nconst openai = new OpenAIApi(configuration);\nexport async function sendMsgToOpenAI(message) {\n  try {\n    // Make the API call\n    const response = await openai.createCompletion({\n      model: 'gpt-3.5-turbo',\n      prompt: message,\n      temperature: 0.7,\n      max_tokens: 256,\n      top_p: 1,\n      frequency_penalty: 0,\n      presence_penalty: 0\n    });\n\n    // Log the API response\n    console.log('OpenAI API Response:', response.data);\n\n    // Return the generated text\n    return response.data.choices[0].text;\n  } catch (error) {\n    // Handle API errors\n    console.error('Error calling OpenAI API:', error.message);\n\n    // You might want to throw the error or handle it in a way that makes sense for your application\n    throw error;\n  }\n}","map":{"version":3,"names":["Configuration","OpenAIApi","require","apiKey","process","env","OPEN_API_KEY","console","error","exit","configuration","openai","sendMsgToOpenAI","message","response","createCompletion","model","prompt","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","log","data","choices","text"],"sources":["/Users/ranjithsreekaranuradhagopinath/Desktop/Projects/chatgpt_clone/clone/src/openai.js"],"sourcesContent":["const { Configuration, OpenAIApi } = require('openai');\n\n// Check if the API key is set\nconst apiKey = process.env.OPEN_API_KEY;\nif (!apiKey) {\n  console.error('Error: OpenAI API key is not set.');\n  process.exit(1); // Exit the process with an error code\n}\n\n// Create a configuration instance\nconst configuration = new Configuration({ apiKey });\n\n// Create an OpenAIApi instance\nconst openai = new OpenAIApi(configuration);\n\nexport async function sendMsgToOpenAI(message) {\n  try {\n    // Make the API call\n    const response = await openai.createCompletion({\n      model: 'gpt-3.5-turbo',\n      prompt: message,\n      temperature: 0.7,\n      max_tokens: 256,\n      top_p: 1,\n      frequency_penalty: 0,\n      presence_penalty: 0,\n    });\n\n    // Log the API response\n    console.log('OpenAI API Response:', response.data);\n\n    // Return the generated text\n    return response.data.choices[0].text;\n  } catch (error) {\n    // Handle API errors\n    console.error('Error calling OpenAI API:', error.message);\n\n    // You might want to throw the error or handle it in a way that makes sense for your application\n    throw error;\n  }\n}\n"],"mappings":"AAAA,MAAM;EAAEA,aAAa;EAAEC;AAAU,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAEtD;AACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,YAAY;AACvC,IAAI,CAACH,MAAM,EAAE;EACXI,OAAO,CAACC,KAAK,CAAC,mCAAmC,CAAC;EAClDJ,OAAO,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA;AACA,MAAMC,aAAa,GAAG,IAAIV,aAAa,CAAC;EAAEG;AAAO,CAAC,CAAC;;AAEnD;AACA,MAAMQ,MAAM,GAAG,IAAIV,SAAS,CAACS,aAAa,CAAC;AAE3C,OAAO,eAAeE,eAAeA,CAACC,OAAO,EAAE;EAC7C,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMH,MAAM,CAACI,gBAAgB,CAAC;MAC7CC,KAAK,EAAE,eAAe;MACtBC,MAAM,EAAEJ,OAAO;MACfK,WAAW,EAAE,GAAG;MAChBC,UAAU,EAAE,GAAG;MACfC,KAAK,EAAE,CAAC;MACRC,iBAAiB,EAAE,CAAC;MACpBC,gBAAgB,EAAE;IACpB,CAAC,CAAC;;IAEF;IACAf,OAAO,CAACgB,GAAG,CAAC,sBAAsB,EAAET,QAAQ,CAACU,IAAI,CAAC;;IAElD;IACA,OAAOV,QAAQ,CAACU,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;EACtC,CAAC,CAAC,OAAOlB,KAAK,EAAE;IACd;IACAD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACK,OAAO,CAAC;;IAEzD;IACA,MAAML,KAAK;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}