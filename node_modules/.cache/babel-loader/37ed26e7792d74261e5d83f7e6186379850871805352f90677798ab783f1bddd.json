{"ast":null,"code":"require(\"dotenv\").config();\nconst {\n  Configuration,\n  OpenAIApi\n} = require('openai');\nconst apiKey = process.env.OPENAI_API_KEY;\nconst configuration = new Configuration({\n  apiKey\n});\nconst openai = new OpenAIApi(configuration);\nasync function sendMsgToOpenAI(message) {\n  const res = await openai.createCompletion({\n    model: 'text-davinci-003',\n    prompt: message,\n    temperature: 0.7,\n    max_tokens: 256,\n    top_p: 1,\n    frequency_penalty: 0,\n    presence_penalty: 0\n  });\n  return res.data.choices[0].text;\n}\n\n// Example usage\nconst message = \"Your input message here\";\nsendMsgToOpenAI(message).then(response => {\n  console.log(\"OpenAI Response:\");\n  console.log(response);\n}).catch(error => {\n  console.error(\"Error communicating with OpenAI:\");\n  console.error(error);\n});","map":{"version":3,"names":["require","config","Configuration","OpenAIApi","apiKey","process","env","OPENAI_API_KEY","configuration","openai","sendMsgToOpenAI","message","res","createCompletion","model","prompt","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","data","choices","text","then","response","console","log","catch","error"],"sources":["/Users/ranjithsreekaranuradhagopinath/Desktop/Projects/chatgpt_clone/clone/src/openai.js"],"sourcesContent":["require(\"dotenv\").config();\n\nconst { Configuration, OpenAIApi } = require('openai');\nconst apiKey = process.env.OPENAI_API_KEY;\n\nconst configuration = new Configuration({ apiKey });\nconst openai = new OpenAIApi(configuration);\n\nasync function sendMsgToOpenAI(message) {\n    const res = await openai.createCompletion({\n        model: 'text-davinci-003',\n        prompt: message,\n        temperature: 0.7,\n        max_tokens: 256,\n        top_p: 1,\n        frequency_penalty: 0,\n        presence_penalty: 0\n    });\n\n    return res.data.choices[0].text;\n}\n\n// Example usage\nconst message = \"Your input message here\";\nsendMsgToOpenAI(message)\n    .then(response => {\n        console.log(\"OpenAI Response:\");\n        console.log(response);\n    })\n    .catch(error => {\n        console.error(\"Error communicating with OpenAI:\");\n        console.error(error);\n    });\n"],"mappings":"AAAAA,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,CAAC,CAAC;AAE1B,MAAM;EAAEC,aAAa;EAAEC;AAAU,CAAC,GAAGH,OAAO,CAAC,QAAQ,CAAC;AACtD,MAAMI,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,cAAc;AAEzC,MAAMC,aAAa,GAAG,IAAIN,aAAa,CAAC;EAAEE;AAAO,CAAC,CAAC;AACnD,MAAMK,MAAM,GAAG,IAAIN,SAAS,CAACK,aAAa,CAAC;AAE3C,eAAeE,eAAeA,CAACC,OAAO,EAAE;EACpC,MAAMC,GAAG,GAAG,MAAMH,MAAM,CAACI,gBAAgB,CAAC;IACtCC,KAAK,EAAE,kBAAkB;IACzBC,MAAM,EAAEJ,OAAO;IACfK,WAAW,EAAE,GAAG;IAChBC,UAAU,EAAE,GAAG;IACfC,KAAK,EAAE,CAAC;IACRC,iBAAiB,EAAE,CAAC;IACpBC,gBAAgB,EAAE;EACtB,CAAC,CAAC;EAEF,OAAOR,GAAG,CAACS,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;AACnC;;AAEA;AACA,MAAMZ,OAAO,GAAG,yBAAyB;AACzCD,eAAe,CAACC,OAAO,CAAC,CACnBa,IAAI,CAACC,QAAQ,IAAI;EACdC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAC/BD,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;AACzB,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,IAAI;EACZH,OAAO,CAACG,KAAK,CAAC,kCAAkC,CAAC;EACjDH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;AACxB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}